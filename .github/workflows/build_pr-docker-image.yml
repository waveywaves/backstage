name: Build PR Image
on:
  pull_request:
    types: [opened,synchronize,reopened,closed]

jobs:
  build-backstage:
    name: Build and push `backstage`
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    if: ${{ github.event.action != 'closed' }}
    steps:
      - name: Set Build Variables
        run: |
          if [[ "$GITHUB_REF" =~ ^refs/tags/v* ]]; then
            echo "Using TAG mode: $GITHUB_REF_NAME"
            echo "REL_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
            echo "REL_VERSION_STRICT=${GITHUB_REF_NAME#?}" >> $GITHUB_ENV
          else
            echo "Using BRANCH mode: v$BASE_DEV_VERSION-dev.$GITHUB_RUN_NUMBER"
            echo "REL_VERSION=v$BASE_DEV_VERSION-dev.$GITHUB_RUN_NUMBER" >> $GITHUB_ENV 
            echo "REL_VERSION_STRICT=$BASE_DEV_VERSION-dev.$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          fi
          export PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
      - name: checkout
        uses: actions/checkout@v3
        with:
          path: backstage
          ref: ${{ github.event.client_payload.version }}

      - name: setup-node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      # Beginning of yarn setup, keep in sync between all workflows.
      # TODO(Rugvip): move this to composite action once all features we use are supported
      - name: use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/ # Needed for auth

      # Cache every node_modules folder inside the monorepo
      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          # We use both yarn.lock and package.json as cache keys to ensure that
          # changes to local monorepo packages bust the cache.
          key: ${{ runner.os }}-v${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}

      # If we get a cache hit for node_modules, there's no need to bring in the global
      # yarn cache or run yarn install, as all dependencies will be installed already.

      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: cache global yarn cache
        uses: actions/cache@v2
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      # End of yarn setup

      - name: backstage create-app | delete if already exists 
        run: | 
          rm -rf ./uffizzi-app
          npx @backstage/create-app
        env:
          BACKSTAGE_APP_NAME: uffizzi-app

      - name: Use Uffizzi's backstage app config 
        run: |
          # echo "------------------------ LIST FILES IN ./"
          # ls ./
          # echo "------------------------ OLD LIST FILES IN ./uffizzi-app/packages/backend"
          # ls ./uffizzi-app/packages/backend
          # echo "------------------------ OLD PRODUCTION APP CONFIG"
          # cat ./uffizzi-app/app-config.production.yaml;
          echo "------------------------ COPY UFFIZZI PRODUCTION APP CONFIG"
          cp ./backstage/.github/uffizzi/uffizzi.production.app-config.yaml ./uffizzi-app/app-config.production.yaml;
          # echo "------------------------ NEW PRODUCTION APP CONFIG"
          # cat ./uffizzi-app/app-config.production.yaml;
          # echo "------------------------ OLD Dockerfile"
          # cat ./uffizzi-app/packages/backend/Dockerfile
          echo "------------------------ COPY UFFIZZI Dockerfile and docker-entrypoint.sh"
          cp ./backstage/.github/uffizzi/Dockerfile ./uffizzi-app/packages/backend/Dockerfile
          cp ./backstage/.github/uffizzi/docker-entrypoint.sh ./uffizzi-app/packages/backend/docker-entrypoint.sh
          # echo "------------------------ CHECK docker-entrypoint.sh"
          # cat ./uffizzi-app/packages/backend/docker-entrypoint.sh
          # echo "------------------------ CHECK FILES IN ./uffizzi-app"
          # ls ./uffizzi-app
      - name: yarn build
        run: yarn build
        working-directory: ./uffizzi-app

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate UUID image name
        id: uuid
        run: echo "::set-output name=uuid::$(uuidgen)"

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ttl.sh/${{ steps.uuid.outputs.uuid }}
          tags: | 
            type=raw,value=24h
      - name: Build Image
        uses: docker/build-push-action@v3
        with:
          context: uffizzi-app
          file: uffizzi-app/packages/backend/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true # makes image available to docker client
          push: false

      - name: DEBUG - Image information
        if: ${{ runner.debug }}
        run: |
          docker image ls ttl.sh/${{ steps.uuid.outputs.uuid }}:24h
          docker history ttl.sh/${{ steps.uuid.outputs.uuid }}:24h
      - name: Push Image to TTL.SH
        run: docker push ttl.sh/${{ steps.uuid.outputs.uuid }}:24h

  render-compose-file:
    name: Render Docker Compose File
    # Pass output of this workflow to another triggered by `workflow_run` event.
    runs-on: ubuntu-latest
    needs: 
      - build-backstage
    outputs:
      compose-file-cache-key: ${{ steps.hash.outputs.hash }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Render Compose File
        run: |
          BACKSTAGE_IMAGE=$(echo ${{ needs.build-backstage.outputs.tags }})
          export BACKSTAGE_IMAGE
          # Render simple template from environment variables.
          envsubst < .github/uffizzi/docker-compose.template.yml > docker-compose.rendered.yml
          cat docker-compose.rendered.yml
      - name: Upload Rendered Compose File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: docker-compose.rendered.yml
          retention-days: 2
      - name: Serialize PR Event to File
        run:  |
          cat << EOF > event.json
          ${{ toJSON(github.event) }} 
          
          EOF
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2

  delete-preview:
    name: Call for Preview Deletion
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'closed' }}
    steps:
      # If this PR is closing, we will not render a compose file nor pass it to the next workflow.
      - name: Serialize PR Event to File
        run: echo '${{ toJSON(github.event) }}' > event.json
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2
